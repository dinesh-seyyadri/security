ACLs:Access Control Lists

ACLs are often associated with the control of packets in and out of an interface. 
However, there are many different applications of ACLs.
For example, they can be used to control route advertisements, to specify interesting traffic for a VPN, and to limit debug output.
An ACL in isolation is just a packet classification specification. 
What is done with packets that match the specification depends on how the ACL is applied. 
This topic will focus on ACLs that control packets traveling into and out of an interface.

Cisco routers support the following two types of IP ACLs:

A) Standard IP ACLs: 

Standard IP ACLs check the source addresses of packets that can be routed.
The result either permits or denies the output for an entire protocol suite according to the source network, subnet, or host IP address. 
Standard ACLs filter IP packets based on source address only.

b) Extended IP ACLs: 

Extended IP ACLs check both the source and destination IP addresses. 
They can also check for specific protocols, port numbers, and other parameters, which allow administrators more flexibility and control.
Mainly used for IP,Tcp,udp,icmp
The two general methods you can use to create ACLs are as follows:

a) Numbered ACLs: An effective method on smaller networks with more homogeneously defined traffic. 
Because each type of ACL is limited to an assigned range of numbers, it easy to determine the type of ACL that you are using. 
Specifying an ACL number from 1 to 99 or 1300 to 1999 instructs the router to accept numbered standard IPv4 ACL statements. 
Specifying an ACL number from 100 to 199 or 2000 to 2699 instructs the router to accept numbered extended IPv4 ACL statements.

b) Named ACLs: Allows you to identify IP standard and extended ACLs with an alphanumeric string (name) instead of the numeric representations.
Named IP ACLs provide more flexibility in working with the ACL entries.


1) ex :numbered standard ACL:

#####

RouterX(config)#access-list 1 permit 172.16.0.0 0.0.255.255
RouterX(config)#int g0/1
RouterX(config-if)#ip access-group 1 in

#####

2) ex :named standard ACL:

########

RouterX(config)#ip access-list standard MyFirstACL
RouterX(config-std-nacl)#permit 192.168.3.1
RouterX(config-std-nacl)#exit
RouterX(config)#int g0/2
RouterX(config-if)#ip access-group MyFirstACL in

#######

3) ex: numbered extended ACL:

######

RouterX(config)#access-list 101 permit tcp host 10.10.1.10 any
RouterX(config)#access-list 101 permit udp host 10.10.1.20 any
RouterX(config)#int e0/0
RouterX(config-if)#ip access-group 101 in

#######

4) ex : named extended ACL:

#######

RouterX(config)#ip access-list extended EXAMPLE
RouterX(config-ext-nacl)#deny udp any any
RouterX(config-ext-nacl)#permit tcp host 10.10.1.10 any eq 23
RouterX(config-ext-nacl)#deny tcp host 10.10.1.10 any
RouterX(config-ext-nacl)#permit ip any any
RouterX(config-ext-nacl)#exit
RouterX(config)#int e0/0
RouterX(config-if)#ip access-group EXAMPLE in

#######



ACLS on Switches:

 ACLs can be applied in three different ways to control traffic flow on Cisco switches:

1) PACLs: PACLs provide access control to traffic entering a Layer 2 interface. (port access lists)
Cisco multilayer switches do not support PACLs in the outbound direction. 
You can apply only one IP ACL and one MAC ACL to a Layer 2 interface.

2) Router ACLs: Router ACLs provide access control to routed traffic between VLANs and are applied to Layer 3 interfaces in a specific direction (inbound or outbound). 
Router ACLs can also be implemented on switches with Switched Virtual Interfaces (SVIs).

3) VACLs: Also known as VLAN maps, they provide access control to all traffic on a VLAN. 
You can apply VLAN maps to all packets that are routed into or out of a VLAN or are bridged within a VLAN in the switch. 
You do not define VACLs by direction (input or output).


There are two types of PACLs:(port access lists)

a) IP access list: This PACL filters IPv4 and IPv6 packets on a Layer 2 port.
b) MAC access list: This PACL filters packets that are of an unsupported type, based on the fields of the Ethernet frame. 
A MAC access list is not applied to IP, MPLS, or ARPmessages. You can define only named MAC access lists.

ex:  MAC PACL

######

Switch(config)# mac access-list extended simple-mac-acl
Switch(config-ext-macl)# permit host 0000.dada.fafa any
Switch(config-ext-macl)# interface gigabitEthernet 2/0/22
Switch(config-if)# mac access-group simple-mac-acl in

#######


ex:  IP PACL

######

Switch(config)# ip access-list extended simple-ip-acl
Switch(config-ext-nacl)# permit ip host 10.0.0.1 any
Switch(config-ext-nacl)# interface gigabitEthernet 2/0/22
Switch(config-if)# ip access-group simple-ip-acl in

####


VACLs (also known as VLAN maps in Cisco IOS Software) apply to all the traffic on the VLAN. VLAN maps have no direction. 
To use a VLAN map to filter traffic in a specific direction, you must include an ACL with specific source or destination addresses.


Each VLAN map consists of a series of entries. 
The order of entries in a VLAN map is important.
A packet that comes into the switch is tested against the first entry in the VLAN map. 
If the packet matches, the action that is specified for that part of the VLAN map is taken.
If there is no match, the packet is tested against the next entry in the map. 
If the packet does not match any of these match clauses, the default is to drop the packet.

Three VACL actions are permitted:

a) Forward (with capture, Cisco Catalyst 6500 Series Switches only)
b) Drop (with logging, Catalyst 6500 Series only)
c) Redirect (Catalyst 6500 Series only)

The VACL match statement is used to reference an IP ACL or MAC ACL.

This command matches the packet (using either the IP or the MAC address) against one or more standard or extended ACLs.
Packets are matched only against ACLs of the correct protocol type. IP packets are matched against standard or extended IP ACLs.
Non-IP packets are matched only against named MAC extended ACLs. The full syntax for the command is as follows:


match {ip | mac} address {name | number} [name | number]

ex:

Cat6K-IOS(config)#ip access-list extended Permit_Web_Traffic
Cat6K-IOS(config-ext-nacl)#permit tcp any any eq 443
Cat6K-IOS(config-ext-nacl)#permit udp any any
Cat6K-IOS(config-ext-nacl)#exit
Cat6K-I

OS(config)#vlan access-map Client_VLAN_Map
Cat6K-IOS(config-access-map)#match ip address Permit_Web_Traffic
Cat6K-IOS(config-access-map)#action forward
Cat6K-IOS(config-access-map)#exit
Cat6K-IOS(config)#vlan filter Client_VLAN_Map vlan-list 100

The example shows a VACL. In the example, the IP extended ACL named Permit_Web_Traffic is used to match all HTTPS and all UDP traffic:

at6K-IOS(config)#ip access-list extended Permit_Web_Traffic
Cat6K-IOS(config-ext-nacl)#permit tcp any any eq 443
Cat6K-IOS(config-ext-nacl)#permit udp any any


The following lines from the VACL define the VLAN access map and define that the HTTPS and UDP traffic that is matched by the Permit_Web_Traffic ACL should be forwarded:

Cat6K-IOS(config)#vlan access-map Client_VLAN_Map
Cat6K-IOS(config-access-map)#match ip address Permit_Web_Traffic
Cat6K-IOS(config-access-map)#action forward

The following line applies the VLAN access map to the appropriate VLAN. In this example, the VLAN is 100.
 
 Cat6K-IOS(config)#vlan filter Client_VLAN_Map vlan-list 100
 
 The result of this VACL is that all HTTPS traffic and all UDP traffic in VLAN 100 is forwarded.
 All other IP traffic that does not match the ACL (that is, packets that are not HTTPS packets or UDP packets) is dropped by default.

VACLs Show commands:

a) show vlan access-map: 

           Switch#show vlan access-map
           Vlan access-map "Client_VLAN_Map" 10
           match: ip address Permit_Web_Traffic
           action: forward

b) show vlan filter:

        Switch#show vlan filter
        VLAN Map Client_VLAN_Map:
        Configured on VLANs: 100
        Active on VLANs: 100





#####################################################################################################################################

#################################################################################################


MAC Address Abuse:


MAC spoofing attacks involve the use of a known MAC address of another host to attempt to make the target switch forward frames that are destined for the remote host to the network attacker. 
By sending a single frame with the source Ethernet address of the other host, the network attacker overwrites the CAM table entry so that the switch forwards packets that are destined for the host to the network attacker.
Until the host sends traffic, it does not receive any traffic. 
When the host sends out traffic, the CAM table entry is rewritten once more so that it moves back to the original port.

MAC spoofing attacks can be mitigated by configuring port security.

The CAM table in a switch contains the MAC addresses that can be reached from a given physical port of a switch and the associated VLAN parameters for each. 
When a Layer 2 switch receives a frame, the switch looks in the CAM table for the destination MAC address. 
If an entry exists for the MAC address in the CAM table, the switch forwards the frame to the MAC address port designated in the CAM table. 
If the MAC address does not exist in the CAM table, the switch floods the frame out of every port on the switch.

CAM is a special type of memory.
The bridge table or MAC address table is the data structure that is stored in that special type of memory.


The most important point to understanding how CAM overflow attacks work is to know that CAM tables are limited in size.
MAC flooding takes advantage of this limitation by bombarding the switch with fake source MAC addresses until the switch CAM table is full.
If enough entries are entered into the CAM table, the CAM table fills up to the point that no new entries can be accepted. 
Note that this attack will not cause legitimate entries that were in the CAM table before the attack to be removed. 
As long as activity is seen from the legitimate MAC addresses, their spot in the CAM table will be reserved. 
But if they time out, the attack will quickly consume the freed spot in the CAM table and the legitimate MAC address will not be relearned.

In a CAM table overflow attack, a network attacker uses a tool such as the macof program and floods the switch with many invalid source MAC addresses until the CAM table fills up. 
When that occurs, the switch begins to flood traffic for unknown MAC addresses to all ports because there is no room in the CAM table to learn any legitimate MAC addresses.
In essence, the switch acts like a hub. As a result, the attacker can see all the frames that are sent from a victim host to another host without a CAM table entry. 
CAM table overflow floods traffic only within the local VLAN, so the intruder will see only traffic within the local VLAN to which the attacker is connected.

In a CAM table overflow attack, a network attacker uses a tool such as the macof program and floods the switch with many invalid source MAC addresses until the CAM table fills up. When that occurs, the switch begins to flood traffic for unknown MAC addresses to all ports because there is no room in the CAM table to learn any legitimate MAC addresses. 
In essence, the switch acts like a hub.
As a result, the attacker can see all the frames that are sent from a victim host to another host without a CAM table entry. 
CAM table overflow floods traffic only within the local VLAN, so the intruder will see only traffic within the local VLAN to which the attacker is connected.

If the attacker does not maintain the flood of invalid source MAC addresses, the switch eventually ages out older MAC address entries from the CAM table and begins to act like a switch again.

The macof program is running on host C. 
The macof program is one of many tools that can flood a switch with packets that contain randomly generated source and destination MAC addresses. 
Over a short period, the CAM table in the switch fills up until it cannot accept new entries.
Entries that were in the CAM table before the attack started remain in the table, but when the CAM table is full, the switch begins to flood frames that are destined to legitimate MAC addresses that can no longer be placed into the CAM table.

In normal ARP operation, a host sends an ARP request broadcast to determine the MAC address of a destination host with a particular IP address.
The device with the requested IP address sends an ARP reply with its MAC address. 
The originating host caches the ARP response, using it to populate the destination Layer 2 header of frames that are sent to that IP address.
By spoofing an ARP message from a legitimate device, an attacking device deceives a victim device, causing it to cache the attacking device’s MAC address instead of the legitimate device’s IP address. 
The victim then sends frames that are destined for the legitimate device’s IP address to the attacker’s MAC address.

An ARP spoofing attack, also known as ARP cache poisoning, can target hosts, switches, and routers that are connected to your Layer 2 network by poisoning the ARP caches of systems that are connected to the subnet, and by intercepting traffic that is intended for other hosts on the subnet.
The figure below shows an example of ARP cache poisoning, as detailed in the “ARP Spoof Attack” table. In this scenario, host B is the attacker. 
Host B becomes a man in the middle. Host A mistakenly forwards frames that are destined for the gateway to Host B. 
The gateway mistakenly forwards frames that are destined for Host A to Host B.
Host B can process the frames and then forward the frames to their correct destination. 
Host B may passively capture private data as a man in the middle, or it could actively inject or modify data or hijack network sessions.


To prevent ARP cache poisoning, a switch must ensure that only valid ARP requests and responses are allowed within a subnet. 
The DAI feature of Cisco switches prevents ARP cache poisoning by intercepting and validating all ARP requests and responses. 
Each intercepted ARP message is verified for valid MAC-to-IP address bindings before it is forwarded.
ARP replies with invalid MAC-to-IP address bindings are dropped.


Port Security:

You can use the port security feature to restrict input to an interface by limiting the maximum number of MAC addresses and identifying particular MAC addresses that are allowed to access the port.
When you assign secure MAC addresses to a secure port, the port does not forward packets that have source addresses that are outside the group of defined addresses.


Port security allows you to statically specify MAC addresses for a port or permit the switch to dynamically learn a limited number of MAC addresses.
By limiting the number of permitted MAC addresses on a port to one, you can use port security to control unauthorized expansion of the network.
Limiting the maximum number of MAC addresses on a port also mitigates the CAM table overflow attack.


When a secure port receives a packet, the source MAC address of the packet is compared to the list of secure source addresses that were manually configured or dynamically learned on the port. 
If the arriving MAC address is on the list, it is processed normally.
If the arriving MAC address is not on the list, but dynamic learning is enabled and there is room for an additional MAC address, it is added to the list and processed normally. 
If the MAC address is not on the list and learning is disabled or the maximum number of MAC addresses is already reached, one of three actions is taken based on the configured violation mode:

1) Protect: The offending frame is dropped.
2)Restrict: The offending frame is dropped and an SNMP trap and a Syslog message are generated.
3)Shutdown: The interface is placed in an error-disabled state and an SNMP trap and a Syslog message are generated. 
The port is inactive while in an error-disabled state.
Administrative action is required to return the port to a normal state


config typical port security configuration for a voice port:

note: Two MAC addresses are allowed and they are learned dynamically.
One MAC address is for the IP phone and the other IP address is for the PC connected to the IP phone.
Violations of this policy result in the port being shut down and the aging timeout for the learned MAC addresses being set to two hours.

########

Switch(config)#interface g0/8
Switch(config-if)#switchport mode access 
Switch(config-if)#switchport port-security 
Switch(config-if)#switchport port-security maximum 2	
Switch(config-if)#switchport port-security violation shutdown	
Switch(config-if)#switchport port-security mac-address sticky 
Switch(config-if)#switchport port-security aging time 120

####

show commands Port security:

show port-security
show port-security [interface interface-id]
###########################
Switch#show port-security address
Secure Mac Address Table
-------------------------------------------------------------------
Vlan    Mac Address       Type                Ports   Remaining Age
                                                         (mins)
----    -----------       ----                -----   -------------
   1    0000.ffff.aaaa    SecureConfigured    g0/8       -
-------------------------------------------------------------------
Total Addresses in System (excluding one mac per port)     : 0
Max Addresses limit in System (excluding one mac per port) : 1024

######################


