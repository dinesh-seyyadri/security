Firewall

1) Firewall Overview
2) Packet Filters
3) Stateful Firewalls
4) Proxy Servers
5) Next-Generation Firewalls
6) Logging


1) Firewall Overview:

Networks are commonly divided into zones with differing security requirements. 
In a network, a firewall is intended to control what passes from one security zone to another. 
If a system is compromised in one zone, firewalls help to contain the attack to within that zone. 
In addition, within a network, firewalls also have the job of preventing the undesirable access in the first place.

Consider the following common deployment scenario for a firewall using three zones:
 Inside: a private, trusted network
 Outside: the public, untrusted Internet
 DMZ: a zone containing servers which are accessible by the public Internet

While every deployment has its own unique requirements, there are some policies that are commonly implemented in this type of deployment. 
For example, connections from systems on the outside to systems on the inside are forbidden. 
Connections from the inside to the outside, on the other hand, are generally permitted. 
However, there may be limitations on the application protocols that are allowed from the inside to the outside. 
For connectivity from the outside to the DMZ, what is allowed is strictly defined.
Access is only allowed to the specific ports on specific servers based on the services which are intended to be provided by the server. 
Also, it is common to be very restrictive on connections that can be made from servers on the DMZ to systems in other zones. 
If a server on the DMZ is compromised by an attacker, the compromised server should not be allowed to be used as a stepping stone to the inside or to launch attacks against other systems on the outside.

In principle, a firewall can be defined as a system or a group of systems that enforces an access control policy between two or more networking zones.
That is, the firewall classifies traffic and makes decisions on which traffic to forward and which traffic to deny based on a configured policy.
Understand that, with this loose definition of a firewall, a firewall can be implemented in various ways.

Some of the options include:

Packet filtering on routers and switches
Dedicated firewall appliances
Complex systems integrating multiple hosts and appliances into a firewall system including features such as intrusion protection, application awareness, and content security


While the definition provided above is loose, there are some requirements that all firewalls should share:

1) A firewall must be resistant to attacks. 
   If the firewall is compromised, all the security functions it provides are also compromised. 
   The firewall itself must be strongly secured.
  
  
2) A firewall must be the only transit point between network zones.
   If there are alternative paths that exist, attackers may utilize the alternative paths to circumvent the firewall policy.

3) A firewall enforces the access control policy of the organization.
   The configuration of policy that is enforced by a firewall should not be at the whim of the firewall administrator. 
   It should instead be based on the central security policies which govern information technology use within an organization.
   
There are several benefits to the firewall model.
Firewalls reduce the complexity of security management by concentrating security functions at the connection points between network security zones.
A properly designed firewall solution is simple, scalable, and robust.

Various protective measures can be provided by firewalls. Some of them include:

 1) Reducing exposure of sensitive hosts and applications to untrusted users: Policies between zones will differ based on requirements.
    Access to a server hosting confidential data may be limited to a set of trusted IP addresses.
    
 2) Protection of protocol flaw exploitation: Different firewall implementations will have different capabilities regarding protocol awareness. 
    They may have awareness of fragmentation processes at the IP layer, connection state flows at the TCP layer, or control mechanisms at the application layer. 
    Many firewalls can enforce the compliant behavior of protocols. They can recognize and block malformed packets and recognize other abuses within the protocol data streams.
   
Some organizations have the misconception that a modern firewall provides a complete network security solution. 
In reality, firewalls should be components in the larger security architecture and solution.

Firewalls have many limitations. A few of them include:

1) The fact that firewalls concentrate security administration at the critical junctures between network security zones provides a benefit.
   But it is also a limitation. A misconfiguration of the firewall can have disastrous consequences, as can a hardware failure. 
   Configuration of a firewall must be done with great care and attention to detail. 
   Optimally, high availability features should be used between firewalls to eliminate any single point of hardware failure.

2) Due to being implemented at critical points between network security zones, firewalls can introduce performance bottlenecks. 
   A firewall must be appropriately sized for traffic that it is expected to forward.

3) Firewalls cannot control data paths that circumvent them. 
   For example, if an organization implements an insecure wireless network which can be accessed from the parking lot, there is nothing that a firewall can do to prevent that access.

4) As with any security mechanism, if the user community does not understand the policies and views them as oppressive, they may find ways to bypass firewall policy. 
   For example, they may use a cellular service for Internet access from within the internal network, or they may transfer confidential files to less secure network zones using USB flash drives.

5) A significant number of intrusions are initiated from within the trusted network. 
   Generally, firewalls can only provide protection between network security zones, not within security zones. 
   There are some exceptions to this rule, such as the use of VLAN ACLs within a switched network or the use of centrally managed host-based firewalls throughout a network security zone.

########

2) Packet Filters:

The simplest type of firewall is a packet filter. 
As the name implies, packet filters look at individual packets in isolation. 
Based on the contents of the packet and the configured policy, they make a permit or deny decision. 
Packet filters generally have robust options for differentiating desirable and undesirable packets

Common options include:

 1) Source and destination IP addresses at the network layer.
 2) Protocol differentiation at the transport layer: TCP, UDP, ICMP, OSPF, and so on
 3) When the transport layer is TCP or UDP, source and destination ports can be specified.
 4) When the transport layer is ICMP, types and codes can be specified.
 5) When the traffic is TCP, the presence of the ACK bit or the RST bit can be verified. 
    Under normal TCP connection flow, neither of these bits is ever set in the first packet of a new TCP connection.
    
Packet filtering is commonly implemented on Cisco IOS routers and switches. 
ACLs are used to classify packets. ACLs can be used for various functions on a Cisco IOS router. 
For example, they can be used to classify which packets are permitted into a priority queue. 
They can be used to classify which networks an OSPF process will advertise or which network advertisements an OSPF process will accept.
They can be used to classify which packets will have their forwarding path specified by a policy-based route. 
When an ACL is applied to an interface with an access-group command, it implements a packet filter.

Consider the following ACL with reference to the topology depicted above:

access-list 100 permit tcp any 10.10.10.10 eq www
access-list 100 permit tcp any 10.10.10.10 eq 443
access-list 100 permit tcp any 10.10.10.11 eq www
access-list 100 permit tcp any 10.10.10.11 eq 443
access-list 100 permit tcp any 10.10.10.12 eq ftp
access-list 100 permit tcp any 10.10.10.12 eq ftp-data
access-list 100 deny ip any any log

The ACL describes a policy of what is permitted and denied from the user subnet to the server subnet. 
To be effective, it can either be applied inbound on the interface connecting to the user subnet or it can be applied outbound to the interface connected to the server subnet. 
Some points of interest in this example include:

1) Clients on the user subnet are permitted to send packets to TCP ports 80 and 443 on the two web servers on the server subnet.

2) Clients on the user subnet are permitted to send packets to TCP ports 20 and 21 on the FTP server on the server subnet.

3) Standard FTP will function. Clients establish the control channel by connecting to port 21 on the FTP server.
   When the client requests a data transfer, it will obtain an ephemeral TCP port from its operating system and convey the appropriate port to the FTP server. 
   The server will then open a data channel by connecting from TCP port 20 to the specified ephemeral port on the client. 
   All packets that are sent from the client to the server associated with this data connection will be sent to TCP port 20.
   
4) Passive FTP will not function. Clients establish the control channel by connecting to port 21 on the FTP server. 
   When the client requests a data transfer, it specifies the request as passive. 
   The server application then requests an ephemeral port from its operating system and communicates the port to the client. 
   The client then initiates the data channel by connecting to the ephemeral port on the server. 
   This connection would not be allowed by the ACL as written. 
   This is a single example of the difficulty packet filters have in handling protocols which use dynamically negotiated connections.
   
5) No connections are allowed from the user subnet to the SQL server.
   The SQL server is there to provide real time data to be presented by the web servers. 
   Access to the data must be through the interface that is provided by the web servers. 
   The SQL server is largely protected from the user subnet.
   
6) There is an explicit deny for all other packets as the last entry in the ACL. 
    While this line is not required to deny all packets that were not matched by earlier entries, it does serve two purposes. 
    First, hit counters are maintained for each line in the ACL. 
    The administrator can use the show access-list 100 command to view the ACL and each entry’s hit count. 
    Without the explicit deny, there would be no record of the number of packets that were denied by the ACL. 
    Also, the explicit deny uses the log argument.
    This will cause the generation of Syslog messages that are associated with the denies. 
    This can facilitate central audit trails of rejected traffic.
    
Consider the following ACL:

This is a very simple example to demonstrate the utility and the limitations of the established keyword available for TCP access control entries. 
When the established keyword is specified, the access control entry will match TCP packets between the appropriate IP addresses and TCP ports (in this case any, any), as long as either the ACK bit or the RST bit is set in the TCP header of the packet. 
In this scenario, the ACL would most likely be applied inbound on the interface that is connected to the untrusted network, but it could also be applied outbound on the interface that is connected to the trusted network.

In this scenario, clients on the trusted network can establish the FTP control channel by connecting to TCP port 21 on the FTP server.
The connection is initiated with a 3 way handshake. 
The first packet, sent from the client to the server, only sets the SYN flag in the TCP header and it presents the clients initial sequence number. 
The server then responds with a packet that has both the SYN bit and the ACK bit set. The server presents its initial sequence number and it acknowledges the clients initial sequence number. 
The client then completes the three-way handshake with an ACK, acknowledging the server’s initial sequence number. 
Note that all packets from the server that are associated with this connection have the ACK bit set.

In this scenario, clients on the trusted network can establish the FTP control channel by connecting to TCP port 21 on the FTP server.
The connection is initiated with a 3 way handshake. The first packet, sent from the client to the server, only sets the SYN flag in the TCP header and it presents the clients initial sequence number. 
The server then responds with a packet that has both the SYN bit and the ACK bit set. 
The server presents its initial sequence number and it acknowledges the clients initial sequence number. 
The client then completes the three-way handshake with an ACK, acknowledging the server’s initial sequence number.
Note that all packets from the server that are associated with this connection have the ACK bit set.

In this scenario, clients on the trusted network can establish the FTP control channel by connecting to TCP port 21 on the FTP server.
The connection is initiated with a 3 way handshake.
The first packet, sent from the client to the server, only sets the SYN flag in the TCP header and it presents the clients initial sequence number. 
The server then responds with a packet that has both the SYN bit and the ACK bit set.
The server presents its initial sequence number and it acknowledges the clients initial sequence number. 
The client then completes the three-way handshake with an ACK, acknowledging the server’s initial sequence number.
Note that all packets from the server that are associated with this connection have the ACK bit set.

The last thing to point out in this scenario is an example of a limitation of relying on packet filters that reference the TCP flags in the TCP header of packets. 
Imagine the attacker in the topology wants to start reconnaissance by mapping out the IP addresses of hosts on the trusted side of the packet filter. Note that the ACL will not permit ping via ICMP echo requests. 
The attacker can, however, make clever use of an “ACK Scan.” Instead of sending an ICMP echo request, the attacker can send a TCP packet with the ACK bit set to a destination address. 
Since the ACK bit is set, these packets will match the established keyword reference in the ACL and will be permitted. 
If there is a host present, that host will respond with a TCP Reset (a TCP packet with the RST bit set) in response.
The attacker can perform the same sort of reconnaissance as it could with ICMP ping.
If a reset response is received, the IP address is active. If not, the IP address is not active.



3) Stateful Firewalls:


Where a packet filter controls access on a packet-by-packet basis, stateful firewalls control access on a session by session basis.
This means that the firewall can take into consideration the rules governing sessions at the transport layer and the application layer along with knowledge of what has previously happened within the session to make access control decisions. 
The data that is associated with what has happened previously within sessions is stored in a state table.

Take TCP for example, where a session is a TCP connection. A TCP connection follows very specific rules. 
It begins with a three-way handshake. The client sends a SYN packet to the server, presenting its initial sequence number.
The server responds with a SYN ACK, presenting its initial sequence number and acknowledging the client’s initial sequence number. 
The client then responds with an ACK, acknowledging the server’s initial sequence number. 
At this point data transfer begins. As data is sent, sequence numbers raise in accordance with the amount of data sent.
If packets are lost, retransmissions that follow strict rules can occur.
Eventually the connection has served its purpose and it will be closed.
A TCP connection is gracefully closed with an exchange of FIN packets.


Given an understanding of session rules along with the state table, stateful firewalls can ensure that those rules are followed. 
Network attacks often break rules, confusing systems and causing them to behave in unintended fashions.
When stateful firewalls recognize rules being broken, they will drop offending packets and mitigate the attack.
Take for example TCP connections. The connection must begin with a SYN packet. 
If the policy on the firewall allows the session, the SYN packet is allowed and a new entry in the state table is created. 
The state table stores information such as the source and destination IP addresses and TCP ports, TCP flags, and sequence numbers. 
At this point, there is only one valid packet that can follow in this session. 
It is the server’s SYN ACK packet in response to the client’s SYN, and it needs to be acknowledging the actual sequence number that was originally presented by the client. 
Any violations of the TCP protocol are rejected. 
Take the example of an ACK scan that was presented in the Packet Filter discussion. 
An ACK scan is a reconnaissance method which is effective against a packet filter that permits “established” packets. 
However, an ACK scan is mitigated by a stateful firewall. An independent ACK packet breaks the rules of TCP.
When a stateful firewall sees an ACK packet that does not match any valid TCP connection in the state table, the illegitimate ACK packet will be dropped.

Stateful firewalls can also provide stateful inspection of applications that utilize a control channel to facilitate dynamically negotiated connections.
Voice over IP applications are common examples in modern networks. FTP is another example. 
With FTP, the client connects to the server on TCP port 21, which is the control channel. 
When the client requests data, a new data channel is opened. This is a dynamically negotiated TCP connection. 
There are two modes for the FTP data transfer process. In active mode, the client specifies a TCP port number when making a data request. 
The server then initiates connects from source port 20 to the destination port specified by the client. 
In passive mode, the client requests a passive transfer and the server responds with a port number. 
The client then initiates the dynamic connection by connecting to the destination port specified in the server response.

A stateless packet filter has trouble dealing with FTP. 
Take a packet filter between a trusted inside network and an untrusted outside network. 
If the packet filter allows all packets from the inside to the outside, and it allows TCP packets with the ACK bit set from the outside to the inside, then passive mode FTP will function. 
All connections originate from the inside, and all return packets have the ACK bit set. 
But what if you need to control which applications are allowed to connect to the outside from the inside?
Since the destination port that is used for passive mode connections is unpredictable, you can’t limit destination ports. 
Similarly, take an example of a packet filter between a DMZ environment and the public Internet, again with passive FTP. 
It is best practice to strictly limit the connections that are allowed to be established from DMZ servers to the Internet. 
If a DMZ server is compromised, you don’t want an attacker to be able to leverage your DMZ servers to attack other systems on the Internet. 
But, since the destination port for Passive FTP is unpredictable, you can’t limit destination ports outbound from an FTP server with a packet filter.
The problems are similar, but reversed for active mode FTP. 
Active mode FTP transfers use unpredictable destination ports on the client side.


But stateful firewalls can monitor the control channel of FTP sessions.
When a data connection is negotiated between the client and the server, the stateful firewall can populate the state table with an entry to allow that connection. 
For a passive connection, it can populate the state table to expect a TCP SYN from the client to the server on the destination port that the server specified. 
For an active connection, it can populate the state table to expect a TCP SYN from the server, source port 20 to the client on the destination port specified by the client. 
The state table is then dynamically updated after each packet, through the three-way handshake, the data transfer, and the two-step FIN exchange.


Like stateless packet filters, ACLs are used to configure access control policy stateful firewalls.
But, where the ACLs are referenced packet by packet on a stateless packet filter, they are only referenced session by session on a stateful firewall.
For example, when a TCP SYN packet is received by a stateful firewall, it checks the ACL configuration to determine if it should allow the connection. 
If it is a permitted connection, then an entry is created in the state table. 
The state table now controls the bidirectional flow of all other packets that are associated with that connection.
Any non-SYN TCP packet is processed against the state table, not the ACLs. 
If there is a matching entry in the state table, then the packets are allowed. 
If there is not a matching entry in the state table, the packets are dropped. 
This behavior is evident when you examine the hit counters on ACL entries. 
On a stateless packet filter, the counters increase quickly as they are incremented packet by packet. 
On a stateful packet filter, the counters increment much more slowly as they only increment on the creation of new connections.


4)Proxy Servers:

A third firewall technology is a proxy server, also known as an application layer gateway. 
Unlike packet filtering firewalls and stateful firewalls, a proxy server does not act as a Layer 3 forwarder. 
Instead it acts as a Layer 3 termination point.
When a proxy server is used as a primary path between two networks, it has an interface in both networks.
When a client in one network needs to connect to a server in the other network, it connects to the proxy server and the proxy server connects to the other network. 
This means that there are two separate connections. 
The server does not see a connection from the client. It sees a connection from the proxy server.
   

The limitation of a proxy server is that it needs to have special coding on a per-application basis.
Given the wide variety of network applications, this is very difficult for the firewall vendor to implement.
Also, to make the use of the proxy transparent to the end user, the client application may need to have special coding as well.

This limitation, however, can be turned to an advantage when proxy servers are used for particular, high value applications.
In today’s networks, it is common to pair a stateful firewall with a proxy server that specializes in web applications. 
In this case, the stateful firewall explicitly denies HTTP and HTTPS from the internal network to the Internet. 
It only allows HTTP and HTTPS from the internal network to the proxy server and from the proxy server to the Internet, which forces all HTTP and HTTPS traffic to go through the proxy server.
Other applications, however, are controlled by the stateful firewall itself.

The proxy server vendor can focus on value-added features that are appropriate to web services and not have to worry about all the other protocols that will run through the stateful firewall.
Common services include URL classification and web application identification.
With these features, organizations can enforce policies that align with business goals.
For example, they may deny access to gambling sites and limit the number of hours that an employee can access personal banking applications.


5)Next-Generation Firewalls:

The term “next-generation firewall” has gained a foothold in network security lingo, even though the definition must be a moving target.
What is considered a next-generation firewall today will not be the same as what is considered a next generation firewall in a few years. 
Different vendors will package different sets of features into their next-generation firewalls.

Features that may be included in a next generation firewall include:



 1) URL Filtering: This feature moves the most commonly used proxy server function into the firewall itself, and may take advantage of URL classification and web site reputation scores

 2) Application Visibility and Control: This feature recognizes applications by analyzing data streams instead of looking at transport layer port numbers. 
    For example, applications like Skype that are capable of hopping from one port to another can be recognized. 
    Another example is not only recognizing Facebook, but recognizing gaming within Facebook.

 3) Context Awareness: Who is connecting, to what, from where, using which device, at what time? 
    Policy can be defined that allows members of the marketing team to access Facebook for marketing purposes, but even they are not allowed to access Facebook games. 
    Also, what a user can access via their corporate managed laptop and what they can access via their personal mobile phone may differ.

 4) Intrusion Prevention System: Again, something that has traditionally been handled by separate systems can now be integrated directly into a firewall appliance, and it can be made even more powerful by utilizing the contextual awareness that is integrated into the next generation firewall.

 5) Advanced Malware Protection: This feature can provide detection, blocking, tracking, analysis, and remediation.
########################### 


6) Logging in ASA:


An introductory discussion of firewalling must include the concept of logging. 
Firewalls can generate very high volumes of logging data. 
By default, a Cisco ASA provides audit logs of all sessions that it allows in the state table and of all dropped packets.
Next-generation services such as IPS, malware protection, and identity services add even more volume.
This data is very important. Analyzing the data in real time can recognize networking attacks as they develop.
Analyzing historical data is part of the forensics that are involved in incident response. Firewall data should be logged. 
Compliance with regulatory standards often requires logs to be maintained for extended periods of time. 
This must be well thought out and implemented. 
Centralized logging servers must be provisioned and maintenance plans must be put in place. 
The tremendous volumes of log data make manual monitoring and analysis unfeasible. 
Tools to aid in monitoring and analysis should be implemented. 
In larger organizations, logs are received from many systems, not just the firewalls.
In such cases, larger security information and event management procedures are appropriate.

