zone-based policy firewall:

The zone-based policy firewall changes the original implementation of Cisco IOS Classic Firewall stateful inspection from the older interface-based model to a more flexible, more easily understood zone-based configuration model. 
This section focuses on the features of Cisco IOS zone-based policy firewalls and how to configure them.

1) Zone-Based Policy Firewall Overview
2) Zones and Zone Pairs
3) Introduction to Cisco Common Classification Policy Language
4) Default Policies, Traffic Flows, and Zone Interaction
5) Cisco Common Classification Policy Language Configuration Overview
6) Configuring Zone-Based Policy Firewall Class-Maps
7) Configuring Zone-Based Policy Firewall Policy-Maps
8) Exploring Cisco IOS Zone-Based Firewall

1) Zone-Based Policy Firewall Overview:

The zone-based policy firewall offers an easily understood zone-based configuration model.
Interfaces are assigned to zones, and an inspection policy is applied to traffic moving between the zones. 
You can group physical and virtual interfaces into zones. 
Interzone policies offer considerable flexibility and granularity, which enables you to apply different inspection policies to multiple host groups that are connected to the same router interface.

Zone-based policy firewalls are configured with the Cisco Common Classification Policy Language, 
which employs a hierarchical structure to define inspection for network protocols and the groups of hosts to which the inspection will be applied.

Old interface model for statefull firewall on IOS is CBAC(Context based access control).
**Default action in CBAC was to allow traffic whereas in zone based firewall default action is to deny.
In mordern zone based firewall traffic is allowed to flow only within the interfaces belonging to the same Zone.


Cisco IOS zone-based policy firewall supports the following features:
a) Stateful inspection
b) Application inspection
c) URL filtering
d) Per-policy connection parameters
e) Transparent firewall
f) Virtual routing and forwarding-aware firewall

Benefits of Zone-Based Policy Firewall:

Zones establish the security borders of your network.
A zone defines a boundary where traffic is subjected to policy restrictions as it crosses to another region of your network.
The default policy of a zone-based policy firewall between zones is to "deny all." 
If no policy is explicitly configured, all traffic moving between zones is blocked.
The Cisco Common Classification Policy Language structure is similar to the MQC structure in which class maps are used to categorize traffic and policy maps are used to specify policy to be applied to each traffic category.



2) Zones and Zone Pairs:

A zone is a collection of networks that is reachable over a specific set of router interfaces and is designated to belong to the same zone. 
Zone-based policy firewall access control policies then control access between two or more zones that are configured on the router. 
C3PL, a flexible configuration language, allows you to specify simple or complex access policies in a manageable manner.

Once zones are created, default rules apply.
Default rules generally allow unrestricted access between interfaces that belong to the same zone, while denying all interzone traffic.

***Note:

An interface can belong to only one zone.
*****

A zone pair allows you to specify a unidirectional firewall policy between two security zones, thus changing the default policy.
The direction of the traffic is indicated by specifying a source and destination zone. 
You must first define the source and destination zones before they can be referenced in a new zone pair.

The self zone is a system-defined zone. It does not have any interfaces as members.
A zone pair that includes the self zone, along with the associated policy, applies to traffic directed to the router or traffic that is generated by the router. 
It does not apply to traffic through the router.

Zone-Based Topology Examples

Not considering the self zone, with three security zones(Inside,Outside ,DMZ ), there is the potential to define policy for up to six zone pairs.


In this example, they would be:

Inside-to-outside
Inside-to-DMZ
DMZ-to-inside
DMZ-to-outside
Outside-to-DMZ
Outside-to-inside

Again, you do not necessarily have to define each of these zone pairs.

3) Introduction to Cisco Common Classification Policy Language:


To create firewall policies using C3PL, complete the following tasks:

1) Class map: Define the match criterion in a class map. Class maps identify traffic at OSI Layers 3 through 7.

2) Policy map:Associate policy actions to impose on the matched traffic with a policy map. Policy maps define policy for traffic at Layers 3 through 7.

3) Service policy: Specify where to apply a policy map by referencing the policy map and a zone pair within a service policy. Service policies activate policy maps for traffic flows on specific direction of zone pairs.


Cisco Common Classification Policy Language policies are modular, object-oriented, and hierarchical in nature.

a) Modular and object-oriented: This trait gives the firewall administrator the flexibility to create building-block objects such as class maps and policy maps, and reuse them within a given policy and across policies.

b) Hierarchical: This feature results in powerful policies that can be expanded to include customized inspection, application layer rules, and advanced inspection features. 
   These advanced policies are based on the hierarchical structure that is depicted in the figure.
   
A policy map is applied to traffic flows that traverse a zone pair by using service policies. 
The policy map processes traffic flows by matching sessions against one or more class map objects, and performing policy actions that are defined for the matched class.

In a sense, policy maps are "if-then-else" statements, something similar to saying: "If a traffic flow matches the first class map, then the associated action is performed, and no other class map in the same policy is evaluated. 
Else, if the traffic flow matches the next class map in the configuration, then the associated action is performed." 
If traffic is not matched by any class map in a policy, a default action is performed.


Class maps:

Class maps that analyze Layer 3 and Layer 4 traffic can categorize the traffic that is based on the following criteria:

Access group: A standard, extended, or named ACL can filter traffic that is based on source and destination IP addresses and source and destination ports.
Protocol: The class map can identify Layer 4 protocols such as TCP, UDP, and ICMP, and application services such as HTTP, SMTP, and DNS. Any well-known or user-defined service that is known to PAM can be specified.
Class map: A subordinate class map that provides additional match criteria can be nested inside another class map.

Each class map can have multiple match statements. The match type defines how multiple match statements are processed to match the class:

a) If match-any is specified, traffic must meet only one of the match criteria in the class map.
b) If match-all is specified, traffic must match all the class map criteria to belong to that particular class.


Policy Map:

These considerations apply to policy map creation and usage.

Class maps are evaluated in the order that they are configured and added to the policy map. 
Consider pushing the more specific traffic classes to the top of the policy, while pushing the more generic traffic definitions to the bottom.


Possible actions include inspect, pass, drop, and log. Log is only available with the drop action.
In addition to user-defined classes, a system-defined class map that is named class-default represents all packets that do not match any of the user-defined classes in a policy. 
It is always the last class in a policy map. You can define explicit actions for this group of packets.
If you do not configure any actions for class-default in an inspect policy, the default action is drop.



The Cisco IOS zone-based policy firewall supports the following three policy actions:
Action:***Description*******************************************************When to Use****  
Inspect: 	Permit and statefully track the sessions of the traffic class.	  Permit protocols that the zone-based firewall supports for inspection between zones.
Pass:   	Statelessly permit packets of the traffic class between zones.	  Permit protocols that the zone-based firewall does not support for inspection between zones.
Drop:    	Deny traffic matching the traffic class.	                        Deny specific traffic classes.
Log:     	Log packets of the traffic class.	                                Log denied traffic (can only be used with the drop action).

Service Policy Zone Pair Assignments:


Service policy assignments are unidirectional, as defined by the zone pair to which the policy map is assigned.
Zone pairs define the direction by specifying the source zone and the destination zone.
A policy map that is applied to a given zone pair will match traffic and perform action for that traffic in the direction that is defined by the zone pair.
In other words, the policy map applies to traffic originating at the source zone and flowing toward the destination zone.


Exactly one service policy may be applied to a given zone pair at any given time. 
If you apply a different service policy to a zone pair that already has a service policy, you will overwrite the previous service policy.


4) Default Policies, Traffic Flows, and Zone Interaction:

The membership of the router network interfaces in zones is subject to several rules governing interface behavior as is the traffic moving between zone member interfaces:


a) A zone must be configured before you can assign interfaces to the zone.
b) You can assign an interface to only one security zone.
c) Traffic is implicitly allowed to flow by default among interfaces that are members of the same zone.
d) To permit traffic to and from a zone member interface, a policy allowing or inspecting traffic must be configured between that zone and any other zone.
e) Traffic cannot flow between a zone member interface and any interface that is not a zone member. 
   You can apply pass, inspect, and drop actions only between two zones.
f) Interfaces that have not been assigned to a zone function as classical router ports and might still use legacy stateful inspection configuration.
g) If you do not want an interface on the router to be part of the zone-based firewall policy, it might be necessary to put that interface in a zone and configure a "pass all" policy between that zone and any other zone to which traffic flow is desired.
h) From the preceding rules, it follows that if traffic is to flow among all the interfaces in a router, all the interfaces must be part of the zoning model (each interface must be a member of a zone).

When an interface is configured to be a zone member, the hosts that are connected to the interface are included in the zone, but traffic flowing to and from the interfaces of the router is not controlled by the zone policies. Instead, all the IP interfaces on the router are automatically made part of the self zone when a zone-based policy firewall is configured.
In order to limit IP traffic moving to the IP addresses of the router from the various zones on a router, policies must be applied to block, allow, or inspect traffic between the zone and the self zone of the router, and vice versa. If there are no policies between a zone and the self zone, all traffic is permitted to the interfaces of the router without being inspected.
If desired, you can define a policy using the self zone as either the source or destination zone. The self zone is a system-defined zone. It does not require any interfaces to be configured as members. 
A zone pair that includes the self zone, along with the associated policy, applies to traffic that is directed to the router or traffic that the router generates. It does not apply to traffic traversing the router.
The following are additional rules for zone-based policy firewalls that govern interface behavior when the router is involved in the traffic flow:
All traffic to and from a given interface is implicitly blocked when the interface is assigned to a zone, except traffic to or from other interfaces in the same zone, and traffic to any interface on the router.
All the IP interfaces on the router are automatically made part of the self zone when a zone-based policy firewall is configured. The self zone is the only exception to the default deny-all policy. All traffic to any router interface is allowed until traffic is explicitly denied.
The only exception to the "deny by default" approach is the traffic to and from the router itself. This traffic is permitted by default. You can configure an explicit policy to restrict such traffic.


If desired, you can define a policy using the self zone as either the source or destination zone. The self zone is a system-defined zone. It does not require any interfaces to be configured as members. A zone pair that includes the self zone, along with the associated policy, applies to traffic that is directed to the router or traffic that the router generates. It does not apply to traffic traversing the router.
The following are additional rules for zone-based policy firewalls that govern interface behavior when the router is involved in the traffic flow:
All traffic to and from a given interface is implicitly blocked when the interface is assigned to a zone, except traffic to or from other interfaces in the same zone, and traffic to any interface on the router.
All the IP interfaces on the router are automatically made part of the self zone when a zone-based policy firewall is configured. The self zone is the only exception to the default deny-all policy. All traffic to any router interface is allowed until traffic is explicitly denied.
The only exception to the "deny by default" approach is the traffic to and from the router itself. This traffic is permitted by default. You can configure an explicit policy to restrict such traffic.


Cisco IOS Zone-Based Policy Firewall: Design Considerations

These factors should be considered when designing Cisco IOS zone-based policy firewalls.
An interface can be assigned to only one zone.
An interface pair can be assigned only one policy.
Consider default traffic flows for interfaces without zones, traffic flows between zones, and traffic flows to or from the router interfaces themselves.
Inspection actions cannot be applied to the class-default class.
Remember that the default policy action for unclassified traffic is drop.

5) Cisco Common Classification Policy Language Configuration Overview:

The following procedure can be used to configure a zone-based policy firewall. 
In some circumstances, certain steps can be completed out of order, but some components may be dependent on others.
For instance, you must configure a class map before you can reference it in a policy map. 
Similarly, you cannot assign a policy map to a zone pair unless the policy map is already configured. 
If you try to configure a section that relies on another portion of the configuration that you have not configured, the router responds with an error message.

1) Define zones.
2) Define zone pairs.
3) Define class maps that describe traffic that must have policy which will be applied as it crosses a zone pair.
4) Define policy maps to apply action to the traffic of your class map.
5) Apply policy maps to zone pairs.
6) Assign interfaces to zones.


6) Configuring Zone-Based Policy Firewall Class-Maps:


Class-maps define the traffic that the firewall selects for policy application. 
Layer 4 class-maps sort the traffic that is based on these criteria that is listed here. 
These criteria are specified using the match command in a class-map:

 * Access-group— standard, extended, or named ACL can filter traffic that is based on source and destination IP address and source and destination port.
 
 * Protocol—The Layer 4 protocols (TCP, UDP, and ICMP) and application services such as HTTP, SMTP, DNS, etc. 
   Any well-known or user-defined service that is known to port-application mapping can be specified.
 
 * Class-map—A subordinate class map that provides additional match criteria can be nested inside another class map.
 
 * Not—The not criterion specifies that any traffic that does not match a specified service (protocol), access group, or subordinate class map will be selected for the class map.
 
Combining Match Criteria: match-any Versus match-all:

Class maps can apply match-any or match-all operators to determine how to apply the match criteria. 
If match-any is specified, traffic must meet only one of the match criteria in the class map. 
If match-all is specified, traffic must match all the class map’s criteria in order to belong to that particular class.

Match criteria must be applied in order from more specific to less specific, if traffic meets multiple criteria. 
For example, consider this class map:
########
class-map type inspect match-any my-test-cmap
 match protocol ftp
 match protocol tcp
 
 FTP traffic must encounter the match protocol ftp command first to make sure that the traffic is handled by the service-specific capabilities of FTP inspection.
 If the match lines are reversed, so traffic encounters the match protocol tcp statement before it compares it to match protocol ftp, the traffic is simply classified as TCP traffic, and inspected according to the capabilities of the Firewall’s TCP Inspection component.
 This inspection is a problem for certain services such as FTP, TFTP, and several multimedia and voice signaling services such as H.323, SIP, Skinny, RTSP, and others. 
 These services require additional inspection capabilities to recognize the more complex activities of these services.

##########

Applying an ACL as Match Criteria:

Class maps can apply an ACL as one of the match criteria for policy application. 
If a class map’s only match criterion is an ACL and the class-map is associated with a policy-map applying the inspect action, the router applies basic TCP or UDP inspection for all traffic that is allowed by the ACL, except that which ZFW provides application-aware inspection.
This includes (but not limited to) FTP, SIP, Skinny (SCCP), H.323, Sun RPC, and TFTP. 
If application-specific inspection is available and the ACL allows the primary or control channel, any secondary or media channel associated with the primary/control is allowed, regardless of whether the ACL allows the traffic.

If a class-map applies only ACL 101 as the match criteria, an ACL 101 appears as follows:

access-list 101 permit ip any any

All traffic is allowed in the direction of the service policy that is applied to a given zone-pair, and corresponding return traffic is allowed in the opposite direction. 
Therefore, the ACL must apply the restriction to limit traffic to specific desired types. Note that the PAM list includes application services such as HTTP, NetBIOS, H.323, and DNS.
However, in spite of PAM’s knowledge of the specific application’s use of a given port, the firewall only applies sufficient application-specific capability to accommodate the well-known requirements of the application traffic. 
Thus, simple application traffic such as Telnet, SSH, and other single-channel applications are inspected as TCP, and their statistics are combined together in the show command output. 
If you need application-specific visibility into network activity, you need to configure inspection for services by application name (configure match protocol http, match protocol telnet, and so on).

Compare the statistics available in the show policy-map type inspect zone-pair command output from this configuration with the more explicit firewall policy that is shown later in the topic. 
This configuration is used to inspect traffic from a Cisco IP Phone, and several workstations that use a variety of traffic, which includes HTTP, FTP, NetBIOS, SSH, and DNS:

#############
class-map type inspect match-all all-private
 match access-group 101
!         
policy-map type inspect priv-pub-pmap
 class type inspect all-private
  inspect
 class class-default
!
zone security private
zone security public
zone-pair security priv-pub source private destination public
 service-policy type inspect priv-pub-pmap
! 
interface FastEthernet4
 ip address 172.16.108.44 255.255.255.0
 zone-member security public
!
interface Vlan1
 ip address 192.168.108.1 255.255.255.0
 zone-member security private
!
access-list 101 permit ip 192.168.108.0 0.0.0.255 any

############

While this configuration is easy to define and accommodates all traffic that originates in the private zone (as long as the traffic observes the standard, recognized destination ports), it provides limited visibility into service activity, and does not offer the opportunity to apply the zone-based policy firewall’s bandwidth and session limits for specific types of traffic.
This show policy-map type inspect zone-pair priv-pub command output is the result of the previous simple configuration that uses only a permit ip [subnet] any ACL between zone-pairs.
As you can see, most workstation traffic is counted in the basic TCP or UDP statistics:


##########

stg-871-L#show policy-map type insp zone-pair priv-pub
 Zone-pair: priv-pub
 
  Service-policy inspect : priv-pub-pmap
 
    Class-map: all-private (match-all)
      Match: access-group 101
      Inspect
        Packet inspection statistics [process switch:fast switch]
        tcp packets: [413:51589]
        udp packets: [74:28]
        icmp packets: [0:8]
        ftp packets: [23:0]
        tftp packets: [3:0]
        tftp-data packets: [6:28]
        skinny packets: [238:0]
 
        Session creations since subsystem startup or last reset 39
        Current session counts (estab/half-open/terminating) [3:0:0]
        Maxever session counts (estab/half-open/terminating) [3:4:1]
        Last session created 00:00:20
        Last statistic reset never
        Last session creation rate 2
        Maxever session creation rate 7
        Last half-open session total 0
 
    Class-map: class-default (match-any)
      Match: any 
      Drop (default action)
        0 packets, 0 bytes
        
###########


By contrast, a similar configuration that adds application-specific classes provides more granular application statistics and control, and still accommodates the same breadth of services that was shown in the first example by defining the last-chance class map matching only the ACL as the last chance in the policy map:

######

class-map type inspect match-all all-private
 match access-group 101
class-map type inspect match-all private-ftp
 match protocol ftp
 match access-group 101
class-map type inspect match-any netbios
 match protocol msrpc
 match protocol netbios-dgm
 match protocol netbios-ns
 match protocol netbios-ssn
class-map type inspect match-all private-netbios
 match class-map netbios
 match access-group 101
class-map type inspect match-all private-ssh
 match protocol ssh
 match access-group 101
class-map type inspect match-all private-http
 match protocol http
 match access-group 101
!
policy-map type inspect priv-pub-pmap
 class type inspect private-http
  inspect
 class type inspect private-ftp
  inspect
 class type inspect private-ssh
  inspect
 class type inspect private-netbios
  inspect
 class type inspect all-private
  inspect
 class class-default!
zone security private
zone security public
zone-pair security priv-pub source private destination public
 service-policy type inspect priv-pub-pmap
! 
interface FastEthernet4
 ip address 172.16.108.44 255.255.255.0
 zone-member security public
!
interface Vlan1
 ip address 192.168.108.1 255.255.255.0
 zone-member security private
!
access-list 101 permit ip 192.168.108.0 0.0.0.255 any

######


The more-specific configuration provides this substantial granular output for the show policy-map type inspect zone-pair priv-pub command:

stg-871-L#show policy-map type insp zone-pair priv-pub
 Zone-pair: priv-pub

   Service-policy inspect : priv-pub-pmap

     Class-map: private-http (match-all)
       Match: protocol http
       Match: access-group 101
       Inspect
         Packet inspection statistics [process switch:fast switch]
         tcp packets: [0:2193]

         Session creations since subsystem startup or last reset 731
         Current session counts (estab/half-open/terminating) [0:0:0]
         Maxever session counts (estab/half-open/terminating) [0:3:0]
         Last session created 00:29:25
         Last statistic reset never
         Last session creation rate 0
         Maxever session creation rate 4
         Last half-open session total 0

     Class-map: private-ftp (match-all)
       Match: protocol ftp
       Inspect
         Packet inspection statistics [process switch:fast switch]
         tcp packets: [86:167400]
         ftp packets: [43:0]

         Session creations since subsystem startup or last reset 7
         Current session counts (estab/half-open/terminating) [0:0:0]
         Maxever session counts (estab/half-open/terminating) [2:1:1]
         Last session created 00:42:49
         Last statistic reset never
         Last session creation rate 0
         Maxever session creation rate 4
         Last half-open session total 0

     Class-map: private-ssh (match-all)
       Match: protocol ssh
       Inspect
         Packet inspection statistics [process switch:fast switch]
         tcp packets: [0:62]

         Session creations since subsystem startup or last reset 4
         Current session counts (estab/half-open/terminating) [0:0:0]
         Maxever session counts (estab/half-open/terminating) [1:1:1]
         Last session created 00:34:18
         Last statistic reset never
         Last session creation rate 0
         Maxever session creation rate 2
         Last half-open session total 0

     Class-map: private-netbios (match-all)
       Match: access-group 101
       Match: class-map match-any netbios
         Match: protocol msrpc
           0 packets, 0 bytes
           30 second rate 0 bps
         Match: protocol netbios-dgm
           0 packets, 0 bytes
           30 second rate 0 bps
         Match: protocol netbios-ns
           0 packets, 0 bytes
           30 second rate 0 bps
         Match: protocol netbios-ssn
           2 packets, 56 bytes
           30 second rate 0 bps
       Inspect
         Packet inspection statistics [process switch:fast switch]
         tcp packets: [0:236]
 
         Session creations since subsystem startup or last reset 2
         Current session counts (estab/half-open/terminating) [0:0:0]
         Maxever session counts (estab/half-open/terminating) [1:1:1]
         Last session created 00:31:32
         Last statistic reset never
         Last session creation rate 0
         Maxever session creation rate 1
         Last half-open session total 0

     Class-map: all-private (match-all)
       Match: access-group 101
       Inspect
         Packet inspection statistics [process switch:fast switch]
         tcp packets: [51725:158156]
         udp packets: [8800:70]
         tftp packets: [8:0]
         tftp-data packets: [15:70]
         skinny packets: [33791:0]

         Session creations since subsystem startup or last reset 2759
         Current session counts (estab/half-open/terminating) [2:0:0]
         Maxever session counts (estab/half-open/terminating) [2:6:1]
         Last session created 00:22:21
         Last statistic reset never
         Last session creation rate 0
         Maxever session creation rate 12
         Last half-open session total 0
 
     Class-map: class-default (match-any)
       Match: any 
       Drop (default action)
         4 packets, 112 bytes
         
         
###############


Another added benefit of using a more granular class map and policy map configuration, as mentioned earlier, is the possibility of applying class-specific limits on session and rate values and specifically adjusting inspection parameters by applying a parameter map to adjust each class’s inspection behavior.


7) Configuring Zone-Based Policy Firewall Policy-Maps:

The policy map applies firewall policy actions to one or more class-maps to define the service-policy that will be applied to a security zone-pair.
When an inspect-type policy-map is created, a default class which is named class class-default is applied at the end of the class. 
The class class-default’s default policy action is drop, but can be changed to pass.
The log option can be added with the drop action. Inspect cannot be applied on class class-default.

Zone-Based Policy Firewall Actions

Zone-Based Policy Firewall provides three actions for traffic that traverses from one zone to another:

* Drop—This is the default action for all traffic, as applied by the "class class-default" that terminates every inspect-type policy-map. 
  Other class maps within a policy map can also be configured to drop unwanted traffic. 
  Traffic that is handled by the drop action is silently dropped (i.e., no notification of the drop is sent to the relevant end host) by the zone-based policy firewall, as opposed to the ACL behavior of sending an ICMP “host unreachable” message to the host that sent the denied traffic. 
  Currently, there is not an option to change the silent drop behavior. 
  The log option can be added with drop for syslog notification that traffic was dropped by the firewall.
  
* Pass—This action allows the router to forward traffic from one zone to another. 
  The pass action does not track the state of connections or sessions within the traffic.
  Pass only allows the traffic in one direction. 
  A corresponding policy must be applied to allow return traffic to pass in the opposite direction. 
  The pass action is useful for protocols such as IPSec ESP, IPSec AH, ISAKMP, and other inherently secure protocols with predictable behavior.
  However, most application traffic is better handled in the zone-based policy firewall with the inspect action.
* Inspect—The inspect action offers state-based traffic control. 
  For example, if traffic from the private zone to the Internet zone in the earlier example network is inspected, the router maintains connection or session information for TCP and UDP traffic.
  Therefore, the router permits return traffic that is sent from Internet-zone hosts in reply to private-zone connection requests.
  Also, inspect can provide application inspection and control for certain service protocols that might carry vulnerable or sensitive application traffic. Audit-trail can be applied with a parameter-map to record connection/session start, stop, duration, the data volume that is transferred, and source and destination addresses.

Actions are associated with class maps in policy maps:

######

conf t
 policy-map type inspect z1-z2-pmap
  class type inspect service-cmap
   inspect|drop|allow [service-parameter-map]
   
#######





















