Network management protocols can be classified in different ways.
The three common methodologies that are offered by network devices are a CLI, a web-based GUI, and SNMP.

Access to a device’s CLI can be provided by physical connections to the console port or AUX port. 
This direct serial connection to the device can facilitate an out of band management access method. 
The CLI can also be reached via networking protocols via a device’s VTY lines. In the past, Telnet was commonly used as a protocol for accessing a network device’s CLI. 
While the use of Telnet does persist, its popularity is waning due to security concerns. 
Telnet does not provide any privacy. Not only is the data sent clear text, authentication credentials are also sent clear text. 
If an attacker can sniff a Telnet session, they can capture the administrator’s username and password.
Because of this, SSH has become the standard for CLI access via the network. 
SSH provides the ability for the client to verify the identity of the server (the network device), preventing man-in-the-middle attacks. 
Also, it protects the authentication credentials and the data using encryption.

Many network devices offer web-based GUIs. 
The robustness of the GUI varies from platform to platform. On the ASA platform, ASDM, is a very robust platform and is often preferred by administrators over the CLI. 
On the other hand, IOS devices offer less robust web-based GUIs and administrators often prefer to use the CLI on IOS devices. 
Some devices offer access to the web-based GUI via either HTTP or HTTPS. 
Similar to SSH and Telnet, HTTPS is preferred over HTTP from a security perspective. 
HTTPS allows the client to verify the identity of the network device and it protects the administrator’s credentials and all data passing over the network.

The third option for configuration management across the network is SNMP. 
SNMP uses the concept of a MIB to store configuration and status information that is associated with a device. 
MIBs are organized in a tree structure with branches and entries that are specified by an OID. 
There are three main mechanisms for SNMP communication between a network management system and a network device.
A network management system can retrieve configuration and status information from a device using SNMP GET operations. 
It can also update configuration data in a MIB with an SNMP SET operation.
When the configuration data is modified in the MIB, it is also modified in the device’s running configuration. 
The third mechanism is the use of an SNMP TRAP operation which allows a network device to send unsolicited updates to a network management station.
A variation of the TRAP is an INFORM. 
The device expects the SNMP manager to reply to an INFORM but not a TRAP. Devices will queue and resend unacknowledged INFORMs.

SNMP has evolved through three versions. 
SNMP versions 1 and 2 do not provide much security. 
Operations are controlled with community strings.
Community strings can be read-only or read-write.
GET requests will be honored if the network management system provides either a valid read-only or read-write community string. 
SET requests require the network management system to provide a read-write community string.
With SNMP versions 1 and 2, all data is sent in clear text, including the community strings. 
If an attacker can sniff the SNMP communications, they can extract the read-write community strings. 
It is just as dangerous for an attacker to have the read-write community string as it is for an attacker to have the enable secret of an IOS device.

HTTPS Configuration and Operation:


As with SSH and Telnet, you want to make sure that if you use a web browser to administer network devices, 
they should use HTTPS and not clear text HTTP. On IOS, the HTTP server and HTTPS (http secure-server) are enabled individually. 
For example:

example-rtr(config)#no ip http server
example-rtr(config)#ip http secure-server
% Generating 1024 bit RSA keys, keys will be non-exportable...
[OK] (elapsed time was 0 seconds)
*Oct  9 19:23:54.871: %PKI-4-NOAUTOSAVE: Configuration was modified.  Issue "write memory" to save new certificate
example-rtr(config)#do write memory
Building configuration...
[OK]

example-rtr#show run | section pki
crypto pki trustpoint TP-self-signed-4294967295
 enrollment selfsigned
 subject-name cn=IOS-Self-Signed-Certificate-4294967295
 revocation-check none
 rsakeypair TP-self-signed-4294967295
crypto pki certificate chain TP-self-signed-4294967295
 certificate self-signed 01
  <Hexadecimal encoding of certificate omitted>
        quit
        
        
When the http secure-server command was enabled, there was a message that suggested saving the configuration. Saving the configuration will cause this certificate to become persistent. 
Self-signed certificates are not optimal from a security perspective. 
If a certificate is obtained from a CA, the CA will sign the certificate by hashing the certificate data and then encrypting the hash with the CA’s private key. 
A web browser can verify the CA signature and hence the validity of the certificate by decrypting the signature with the CA’s public key and hashing the certificate data and comparing the two values.
If they match, then the data has not been modified and the signature was generated by the CA’s private key. 
This process cannot be accomplished with self-signed certificates.
Web browsers display security warnings when they are presented with self-signed certificates.
The burden to validate the certificate is now placed on the user. 
If the certificate is accepted, the web browser will generate a session key, encrypt that key with the public key in the server’s certificate. 
It will then send the encrypted session key to the server.
Only the server will have the private key which can be used to decrypt the session key that was proposed by the client.
If the server can decrypt the session key, then a private SSL connection will protect the data that is sent between the client and the server.

SNMP:

SNMP has developed a bad reputation from a security perspective. 
The reputation was deserved with SNMP versions 1 and 2c which are both clear text protocols and use the concept of community strings for authorization. 
Note that the original definition of SNMP version 2 introduced a different authorization methodology, but it was unpopular and not widely implemented. 
SNMP version 2c is SNMP version 2 using the SNMP version 1 concept of community strings.

All versions of SNMP utilize the concept of the MIB. The MIB organizes configuration and status data into a tree structure. 

VIEW A MIB tree . //http://www.luteus.biz/Download/LoriotPro_Doc/V4/LoriotProV4Doc/C3-Introduction_to_Network_Supervision/C3-E5_MIB.htm

Objects in the MIB are referenced by their OID, which specifies the path from the tree root to the object.
For example, system identification data is located under 1.3.6.1.2.1.1. 
Some examples of system data include the system name (OID 1.3.6.1.2.1.1.5), system location (OID 1.3.6.1.2.1.1.6), and system uptime (OID 1.3.6.1.2.1.1.3).

Access is accomplished with GET operations and SET operations.
GET operations allow the management system to retrieve status and configuration data from the device.
Set operations allow the management system to modify the configuration on the device. 
Both SNMP version 1 and 2c use the concept of community strings to authorize access to data stored in the MIB.
A GET request will be honored with either a read-only or a read-write community string. 
A SET operation requires a read-write community string. Community strings are less secure than passwords because they are contained in every SNMP request. 
If an attacker can capture just one SNMP packet, they can obtain the clear text community string.

SNMP also supports unsolicited notifications that are sent from devices to SNMP management systems.
The original notification mechanism was called a trap. The management system is not expected to acknowledge a trap. 
SNMP version 2 introduced the inform mechanism.
An inform is identical to a trap, but an acknowledgement is expected. Devices will queue and resend unacknowledged informs.

SNMP version 3 replaces community strings with a user-based security model, and its architecture provides origin authentication, data integrity, and privacy. 
Authentication and privacy security mechanisms are optional. 

SNMP version 3 can be configured in the following three modes:
 
 1) noAuthNoPriv: No cryptographic hash or encryption / Origin authenticated with username
 2)AuthNoPriv: Use of cryptographic hash to secure authentication credentials, but no encryption for data /Messages authenticated with md5 or SHA
 3)AuthPriv: Use of cryptographic hash to secure authentication credentials and also encryption for data privacy / Messages authenticated with md5 or SHA 
                                                                                                                   Message Encrypted DES 3DES and AES


SNMPv3 uses the concept of engine IDs.

Each system in the management domain requires a unique engine ID. 
The engine ID is composed of 24 hexadecimal characters.
The device will append leading zeros to the engine ID if fewer characters are specified. 
One strategy for assigning engine IDs is to translate the decimal representation of the IP address of a device into a 12-digit string.
If informs are to be used, remote engine IDs must be defined, corresponding to the network management station. 

The syntax for defining SNMPv3 engine IDs is as follows:

 snmp-server engineID {local engine-id | remote ip-address [udp-port udp-port-number] [vrf vrf-name] engine-id-string}


Configuration of the user-based security model in SNMPv3 begins with the configuration of groups. 
The group will specify the cryptographic policy to be used by the group and optionally authorization for read and write access to the MIB can be specified with read views and write views. 
By default, a group is allowed read access to the entire MIB, and write access is not allowed. 

SNMP groups and views are defined with the following commands:

 snmp-server group [groupname {v1 | v2c | v3 [auth | noauth | priv]}] [read readview] [write writeview] [notify notifyview] [access access-list]
 snmp-server view view-name oid-tree {included | excluded}
 
 
Once the groups are configured, SNMP users can be defined. 
The user is assigned to a group. 
The security services that are specified by the group are more specifically defined at the user. 
If authentication is configured, the authentication hash algorithm and the authentication shared secret for this user is defined with the user.
If privacy is configured, the encryption algorithm and the privacy shared secret is defined with the user. 

The syntax for the snmp-server user command is as follows:

 snmp-server user username group-name [remote host [udp-port port] [vrf vrf-name]] {v1 | v2c | v3 [encrypted] [auth {md5 | sha} auth-password]} [access [ipv6 nacl] [priv {des | 3des | aes {128 | 192 |256}} privpassword] {acl-number | acl-name}]

An example configuration of SNMPv3 is as follows:

example-rtr(config)#snmp-server engineID local 010010010099
example-rtr(config)#snmp-server view nms-view 1.3.6.1.2.1 included
example-rtr(config)#snmp-server view nms-view 1.3.6.1.4.9 included
example-rtr(config)#snmp-server group nms-group v3 priv write nms-view
example-rtr(config)#snmp-server user nms-user nms-group v3 auth sha auth-pass priv aes 128 priv-pass
example-rtr(config)#snmp-server host 10.10.10.50 version 3 priv test-user


Locking Down Management Access with ACLs:


SSH, HTTPS, and SNMPv3 all have security advantages over their alternatives, but there are still risks that are associated with their use. 
SSH and HTTPS authentication and authorization are based on usernames and passwords. 
Similarly, SNMPv3 security is based on shared secrets between an SNMP user and the IOS device.
If an attacker obtains any of this information, they could potentially use it for malicious access to your network resources and configurations.

All three of these protocols can use ACLs to limit the IP addresses from which sessions can be initiated. 


Generally a standard IP access list is used for this purpose. 
The details that can be added with an extended IP access list are not needed. 
Take SSH for example. The destination IP address is known, it is the device’s own address.
The protocol is TCP and the destination port is 22. The only concern is the source IP address. 
Hence, specifying trusted IP addresses with a standard IP access list is sufficient. 
For example, the following access list will permit connections from hosts on the 172.16.99.0/24 network and the single host 172.16.50.50.
All other addresses are implicitly denied.

ex:

 Example-rtr(config)#access-list 99 permit 172.16.99.0 0.0.0.255
 Example-rtr(config)#access-list 99 permit 172.16.50.50

To control access to SSH, the ACL can be applied to the VTY lines with the access-class command:

 Example-rtr(config)#line vty 0 4
 Example-rtr(config-line)#access-class 99 in

To control access to HTTPS, the ACL can be applied with the ip http access class command:

 Example-rtr(config)#ip http access-class 99

To control access via SNMPv3, the ACL can be applied either to the SNMP group or user:

 Example-rtr(config)#snmp-server group test-group v3 priv write write-view access 99
 Example-rtr(config)#snmp-server user nms-user nms-group v3 auth sha auth-pass priv aes 128 priv-pass 99
 



